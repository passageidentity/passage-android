/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package id.passage.android.api

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import id.passage.android.model.CreatePasskeyReadinessRequest
import id.passage.android.model.Model400Error
import id.passage.android.model.Model401Error
import id.passage.android.model.Model500Error

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import id.passage.client.infrastructure.ApiClient
import id.passage.client.infrastructure.ApiResponse
import id.passage.client.infrastructure.ClientException
import id.passage.client.infrastructure.ClientError
import id.passage.client.infrastructure.ServerException
import id.passage.client.infrastructure.ServerError
import id.passage.client.infrastructure.MultiValueMap
import id.passage.client.infrastructure.PartConfig
import id.passage.client.infrastructure.RequestConfig
import id.passage.client.infrastructure.RequestMethod
import id.passage.client.infrastructure.ResponseType
import id.passage.client.infrastructure.Success
import id.passage.client.infrastructure.toMultiValue

class PasskeyReadinessAPI(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://auth.passage.id/v1")
        }
    }

    /**
     * Create Passkey Readiness Analytics
     * Sends device&#39;s WebAuthn passkey readiness metrics
     * @param createPasskeyReadinessRequest Passkey readiness metrics
     * @param userAgent  (optional)
     * @param origin url for passkey readiness (optional)
     * @param deviceOS device os - mobile only (optional)
     * @param deviceOSVersion device os version - mobile only (optional)
     * @param appIdentifier app identifier - mobile only (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createPasskeyReadiness(createPasskeyReadinessRequest: CreatePasskeyReadinessRequest, userAgent: kotlin.String? = null, origin: kotlin.String? = null, deviceOS: kotlin.String? = null, deviceOSVersion: kotlin.String? = null, appIdentifier: kotlin.String? = null) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = createPasskeyReadinessWithHttpInfo(createPasskeyReadinessRequest = createPasskeyReadinessRequest, userAgent = userAgent, origin = origin, deviceOS = deviceOS, deviceOSVersion = deviceOSVersion, appIdentifier = appIdentifier)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create Passkey Readiness Analytics
     * Sends device&#39;s WebAuthn passkey readiness metrics
     * @param createPasskeyReadinessRequest Passkey readiness metrics
     * @param userAgent  (optional)
     * @param origin url for passkey readiness (optional)
     * @param deviceOS device os - mobile only (optional)
     * @param deviceOSVersion device os version - mobile only (optional)
     * @param appIdentifier app identifier - mobile only (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createPasskeyReadinessWithHttpInfo(createPasskeyReadinessRequest: CreatePasskeyReadinessRequest, userAgent: kotlin.String?, origin: kotlin.String?, deviceOS: kotlin.String?, deviceOSVersion: kotlin.String?, appIdentifier: kotlin.String?) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createPasskeyReadinessRequestConfig(createPasskeyReadinessRequest = createPasskeyReadinessRequest, userAgent = userAgent, origin = origin, deviceOS = deviceOS, deviceOSVersion = deviceOSVersion, appIdentifier = appIdentifier)

        return@withContext request<CreatePasskeyReadinessRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createPasskeyReadiness
     *
     * @param createPasskeyReadinessRequest Passkey readiness metrics
     * @param userAgent  (optional)
     * @param origin url for passkey readiness (optional)
     * @param deviceOS device os - mobile only (optional)
     * @param deviceOSVersion device os version - mobile only (optional)
     * @param appIdentifier app identifier - mobile only (optional)
     * @return RequestConfig
     */
    fun createPasskeyReadinessRequestConfig(createPasskeyReadinessRequest: CreatePasskeyReadinessRequest, userAgent: kotlin.String?, origin: kotlin.String?, deviceOS: kotlin.String?, deviceOSVersion: kotlin.String?, appIdentifier: kotlin.String?) : RequestConfig<CreatePasskeyReadinessRequest> {
        val localVariableBody = createPasskeyReadinessRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        userAgent?.apply { localVariableHeaders["User-Agent"] = this.toString() }
        origin?.apply { localVariableHeaders["Origin"] = this.toString() }
        deviceOS?.apply { localVariableHeaders["Device-OS"] = this.toString() }
        deviceOSVersion?.apply { localVariableHeaders["Device-OS-Version"] = this.toString() }
        appIdentifier?.apply { localVariableHeaders["App-Identifier"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/analytics/passkey-readiness",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
